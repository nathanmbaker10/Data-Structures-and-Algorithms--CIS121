import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.spi.LocaleServiceProvider;

public class ResizingDequeImpl<E> implements ResizingDeque<E> {
    
    private int size = 0;
    private int head = 0;
    private int tail = 0;
    E[] array = (E[]) new Object[2];
    
    class DequeIterator<F> implements Iterator<F> {
        private int next;
        private boolean started;
        
        
        public DequeIterator() {
            this.next = ResizingDequeImpl.this.head + 1;
            if(ResizingDequeImpl.this.size == ResizingDequeImpl.this.array.length) {
                this.next--;
            }
            if (this.next == ResizingDequeImpl.this.array.length) {
                this.next = 0;
            }
        }
        
        @Override
        public boolean hasNext() {
            if(ResizingDequeImpl.this.size == 0) {
                return false;
            } else if (!this.started) {
                return true;
            }
            return this.next != ResizingDequeImpl.this.tail;
            
        }

        @Override
        public F next() {
            if(!this.hasNext()) {
                throw new NoSuchElementException();
            }
            this.started = true;
            F output = (F) ResizingDequeImpl.this.array[this.next];
            this.next++;
            if(this.next == ResizingDequeImpl.this.array.length) {
               this.next = 0;
            }
            return output;
        }
        
    }

    @Override
    public int size() {
        return this.size;
    }
    
    
    
    @Override
    public E[] getArray() {
       return this.array;
    }

    @Override
    public void addFirst(E e) {
        size++;
        if (this.size == array.length) {
            resizeUp(true, e);
            return;
        } else if(head == -1) {
            head = array.length - 1;
        } else if (head == array.length) {
            head = 0;
        }
        
        if(this.size == 1) {
            tail++;
        }
        
        array[head] = e;
        head--;
    }
    
    //Must implement this resizeup Method
    private void resizeUp(boolean front, E element) {
        E[] oldArray = this.array;
        this.array = (E[]) new Object[oldArray.length * 2];
        int startingIndex = head + 1;
        
        if(front) {
            this.array[0] = element;
        } else {
            this.array[size - 1] = element;
        }
        
        for(int i = 0; i < this.size - 1; i++) {
            if(front) {
                i++;
            }
            int currentIndex = startingIndex + i;
            if(currentIndex >= oldArray.length)  {
                currentIndex -= oldArray.length;
            }
            array[i] = oldArray[currentIndex];
        }
        head = -1;
        tail = size;
        
        
    }

    @Override
    public void addLast(E e) {
        size++;
        if (this.size > array.length) {
            resizeUp(false, e);
            return;
        } else if(tail == -1) {
            tail = array.length - 1;
        } else if (tail == array.length) {
            tail = 0;
        }
        if(this.size == 1) {
            head--;
        }
        
        array[tail] = e;
        tail++;
        
    }

    @Override
    public E pollFirst() {
        if (this.size == 0) {
            throw new NoSuchElementException();
        }
        
        E output = (E) this.peekFirst();
        
        if (head + 1 >= array.length) {
            this.array[0] = null;
        } else {
            this.array[head + 1] = null;
        }
        head++;
        size--;
        if(this.size < this.array.length/4) {
            resizeDown();
        } else if (size == 0) {
            this.head = 0;
            this.tail = 0;
        }
        
        
        return output;
    }

    @Override
    public E pollLast() {
        if (this.size == 0) {
            throw new NoSuchElementException();
        } 
        E output = (E) this.peekLast();
        
        if (tail - 1 <= -1) {
            this.array[array.length - 1] = null;
        } else {
            this.array[tail - 1] = null;
        }
        tail--;
        size--;
        if(this.size < this.array.length/4) {
            resizeDown();
        } else if (size == 0) {
            this.head = 0;
            this.tail = 0;
        }
        
        return output;
    }
    
    //Must implement this resize down method.
    private void resizeDown() {
        E[] oldArray = this.array;
        this.array = (E[]) new Object[oldArray.length / 2];
        int startingIndex = head + 1;
        
        for(int i = 0; i < this.size; i++) {
            int currentIndex = startingIndex + i;
            if(currentIndex >= oldArray.length)  {
                currentIndex -= oldArray.length;
            }
            array[i] = oldArray[currentIndex];
        }
        head = -1;
        tail = 0;
        
    }

    @Override
    public E peekFirst() {
        if (this.size == 0) {
            throw new NoSuchElementException();
        }
        
        if (head + 1 >= array.length) {
            return this.array[0];
        } else {
            return this.array[head + 1];
        }
        
    }

    @Override
    public E peekLast() {
        if (this.size == 0) {
            throw new NoSuchElementException();
        }
        
        if (tail - 1 <= -1) {
            return this.array[array.length - 1];
        } else {
            return this.array[tail - 1];
        }
    }

    @Override
    public Iterator<E> iterator() {
        Iterator<E> output = new DequeIterator<E>();
        
        return output;
    }

    
      
}
