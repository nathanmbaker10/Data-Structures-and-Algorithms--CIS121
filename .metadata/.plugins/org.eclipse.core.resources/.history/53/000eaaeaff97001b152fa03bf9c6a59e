import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.Iterator;
import java.util.NoSuchElementException;

import org.junit.*;

public class ResizingDequeImplTest {
    @Test(expected = NoSuchElementException.class)
    public void emptyDeque() {
        ResizingDeque<Integer> emptyDeque = new ResizingDequeImpl<Integer>();
        Iterator<Integer> emptyDequeIterator = emptyDeque.iterator();
        assertEquals(0, emptyDeque.size());
        assertFalse(emptyDequeIterator.hasNext());
        
        emptyDeque.pollFirst();
    }
    
    
    @Test
    public void addRemoveSingleElementHead() {
        ResizingDeque<Integer> newDeque = new ResizingDequeImpl<Integer>();
        Iterator<Integer> newDequeIterator = newDeque.iterator();
        assertEquals(0, newDeque.size());
        assertFalse(newDequeIterator.hasNext());

        newDeque.addFirst(1);
        newDequeIterator = newDeque.iterator();
        
        assertTrue(newDequeIterator.hasNext());
        assertEquals(1, newDeque.size());
        
        assertEquals(1, (int) newDequeIterator.next());
        assertFalse(newDequeIterator.hasNext());
        assertEquals(1, (int) newDeque.pollFirst());
        
        
        assertEquals(0, newDeque.size());
    }    
    
    
    @Test
    public void addRemoveSingleElementTail() {
        ResizingDeque<Integer> newDeque = new ResizingDequeImpl<Integer>();
        Iterator<Integer> newDequeIterator = newDeque.iterator();
        assertEquals(0, newDeque.size());
        assertFalse(newDequeIterator.hasNext());

        newDeque.addLast(1);
        newDequeIterator = newDeque.iterator();
        
        assertTrue(newDequeIterator.hasNext());
        assertEquals(1, newDeque.size());
        
        assertEquals(1, (int) newDequeIterator.next());
        assertFalse(newDequeIterator.hasNext());
        assertEquals(1, (int) newDeque.pollFirst());
        
        
        assertEquals(0, newDeque.size());
    }    
    
    
    @Test
    public void addHeadThenTail() {
        ResizingDeque<Integer> newDeque = new ResizingDequeImpl<Integer>();
        Iterator<Integer> newDequeIterator = newDeque.iterator();
        assertEquals(0, newDeque.size());
        assertFalse(newDequeIterator.hasNext());

        newDeque.addFirst(1);
        newDeque.addLast(2);
        newDequeIterator = newDeque.iterator();
        
        assertTrue(newDequeIterator.hasNext());
        assertEquals(2, newDeque.size());
        
        assertEquals(1, (int) newDequeIterator.next());
        assertTrue(newDequeIterator.hasNext());
        assertEquals(2, (int) newDequeIterator.next());
        assertFalse(newDequeIterator.hasNext());
        
        
        assertEquals(1, (int) newDeque.peekFirst());
        assertEquals(1, (int)newDeque.pollFirst()); 
        assertEquals(2, (int) newDeque.peekLast()); 
        assertEquals(2, (int) newDeque.peekFirst());
        assertEquals(1, newDeque.size());
        
        
        
        assertEquals(2, (int) newDeque.pollLast());
        assertEquals(1, (int) newDeque.pollFirst());
        assertEquals(0, newDeque.size());
    }
    
    
    
}
